package rules;

import com.ftn.carDiagnostic.model.symptoms.VisualSymptom;
import com.ftn.carDiagnostic.model.parts.ElectricalParts;
import com.ftn.carDiagnostic.model.parts.FluidParts;
import com.ftn.carDiagnostic.model.parts.MechanicalParts;
import com.ftn.carDiagnostic.model.parts.FuelInjectionParts;
import com.ftn.carDiagnostic.model.parts.AirFlowParts;
import com.ftn.carDiagnostic.model.symptoms.FeelingSymptom
import com.ftn.carDiagnostic.model.symptoms.AudioSymptom
import com.ftn.carDiagnostic.model.Log
import com.ftn.carDiagnostic.model.Car;

global java.util.List problems;

//PRVA GRUPA PRAVILA, NA OSNOVU SIMPTOMA SE PRONALAZI PROBLEMATICAN DEO

//Visual symptoms



rule "Kvar vise puta"
	salience(50) 
    when
    	$vs: VisualSymptom( isHeadlightNotWorking() == true );
        $c: Car($problemHistory: problemHistory);
        Number($value: intValue >= 2) from accumulate(
        	ElectricalParts($t: this, isHeadlight() == true) from $problemHistory,
        	count($t)
        )
    then
    	delete($vs);  
    	delete($c);
    	ElectricalParts ep = new ElectricalParts(); 
       	ep.setTailLight(true);
       	ep.setDescription("Problem with tail light");
       	problems.clear();
       	problems.add(ep);
       	insert(ep); //dodajemo novi problem
    	System.out.println("Kvar headlight vise  od 2 puta");

end



rule "Headlight not working symptom"
	salience(100) 
    when
        $vs: VisualSymptom( isHeadlightNotWorking() == true );
        $c: Car($problemHistory: problemHistory );
        Number($value: intValue < 2) from accumulate(
        	ElectricalParts($t: this, isHeadlight() == true) from $problemHistory,
        	count($t)
        )
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	delete($c);
       	ElectricalParts ep = new ElectricalParts(); ////pravi novi electrical parts problem gde je samo headlight true 
       	ep.setHeadlight(true);
       	ep.setDescription("Problem with headlight");
       	problems.clear();
       	problems.add(ep);
       	insert(ep); //dodajemo novi problem
       	System.out.println("Uspeo da setujem da je problem u headlight"); //testni ispis
end 



rule "Taillight not working symptom"
    when
        $vs: VisualSymptom( isTaillightNotWorking() == true );
    then
   		delete($vs); //izbaci simptom iz baze znanja
   		ElectricalParts ep = new ElectricalParts();
       	ep.setTailLight(true); //pravi novi electrical parts problem gde je samo taillight true 
       	ep.setDescription("Problem with taillight");
		problems.clear();
       	problems.add(ep);
       	insert(ep);
       	System.out.println("Uspeo da setujem da je problem u taillight");
end 

rule "Electric windows not working"
    when
        $vs: VisualSymptom( isElectricWindowNotWorking() == true );
    then
    	ElectricalParts ep = new ElectricalParts();
       	ep.setElectricWindows(true); 
       	ep.setDescription("Problem with electric windows");
       	delete($vs);
       	problems.clear();
       	problems.add(ep);
       	insert(ep);
       	System.out.println("Uspeo da setujem da je problem u Electric windows");
end 

rule "Engine wont start --> dead battery"
	salience(100)
    when
        $vs: VisualSymptom( isEngineStartProblem() == true );
        $c: Car($problemHistory: problemHistory )
        Number($value: intValue < 2) from accumulate(
        	ElectricalParts($t: this, isEngineStartProblem() == true) from $problemHistory,
        	count($t)
        );
    then
    	ElectricalParts ep = new ElectricalParts();
       	ep.setBattery(true); 
       	ep.setDescription("Problem with battery");
       	problems.clear();
       	problems.add(ep);
       	insert(ep);
       	delete($vs);
       	System.out.println("Uspeo da setujem da je problem u battery");
        //update($vs);
end 

rule "Battery dead more than 3 times -> alternator problem"
	salience(50)
	when
    	$vs: VisualSymptom( isEngineStartProblem() == true );
        $c: Car($problemHistory: problemHistory)
        Number($value: intValue >= 2) from accumulate(
        	ElectricalParts($t: this, isEngineStartProblem() == true) from $problemHistory,
        	count($t)
        )
    then
    	delete($vs);  
    	delete($c);
    	ElectricalParts ep = new ElectricalParts(); 
       	ep.setAlternator(true);
       	ep.setDescription("Problem with alternator instead of battery!");
       	problems.clear();
       	problems.add(ep);
       	insert(ep); //dodajemo novi problem
    	System.out.println("Kvar battery treci put --> alternator problem");

end


rule "coolant dash light"
    when
        $vs: VisualSymptom( isCoolantDashLight() == true );
    then
    	FluidParts fp = new FluidParts();
       	fp.setCoolant(true);; //pravi novi electrical parts problem gde je samo taillight true 
       	fp.setLevel(0);       	
       	fp.setDescription("Problem with low coolant level.");
       	problems.clear();
       	problems.add(fp);       	
       	insert(fp);
    	delete($vs);
       	System.out.println("Uspeo da setujem da je problem u coolant");
end 

rule "oil dash light"
    when
        $vs: VisualSymptom( isOilDashLight() == true );
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	FluidParts fp = new FluidParts();
       	fp.setOil(true);
       	fp.setDescription("Problem with low oil level.");
       	fp.setLevel(0);
       	problems.clear();
       	problems.add(fp);
       	insert(fp);
       	System.out.println("Uspeo da setujem da je problem u oil");
end 

rule "steering fluid dash light"
    when
        $vs: VisualSymptom( isSteeringWheelDashLight() == true );
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	FluidParts fp = new FluidParts();
       	fp.setPowerSteeringFluid(true);
       	fp.setDescription("Problem with low power steering level.");
       	fp.setLevel(0);
       	problems.clear();
       	problems.add(fp);
       	insert(fp);
       	//$vs.setHeadlightNotWorking(false);
       	System.out.println("Uspeo da setujem da je problem u steering fluid");
        //update($vs);
end 


rule "white smoke on exhaust, engine gasket fail"
    when
        $vs: VisualSymptom( isWhiteSmoke() == true );
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	MechanicalParts mp = new MechanicalParts();
       	mp.setEngineGasket(true);
       	mp.setDescription("Problem with engine gasket.");
       	problems.clear();
       	problems.add(mp);
       	insert(mp);
       	//$vs.setHeadlightNotWorking(false);
       	System.out.println("Uspeo da setujem da je problem u engine gasket -> mechanic");
        //update($vs);
end 

rule "blue smoke on exhaust"
    when
        $vs: VisualSymptom( isBlueSmoke() == true );
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	MechanicalParts mp = new MechanicalParts();
       	mp.setEngineGasket(true);
       	mp.setDescription("Problem with engine gasket.");
       	problems.clear();
       	problems.add(mp);
       	insert(mp);
       	//$vs.setHeadlightNotWorking(false);
       	System.out.println("Uspeo da setujem da je problem u engine oil consumption -> mechanic");
        //update($vs);
end


rule "black smoke on exhaust"
    when
        $vs: VisualSymptom( isBlackSmoke() == true );
    then
    	delete($vs); //izbaci simptom iz baze znanja
    	FuelInjectionParts fip = new FuelInjectionParts();
       	fip.setNozzle(true);
       	fip.setDescription("Problem with nozzle.");
       	problems.clear();
       	problems.add(fip);
       	insert(fip);    	
       	//$vs.setHeadlightNotWorking(false);
       	System.out.println("Uspeo da setujem da je problem u nozzle");
        //update($vs);
end

rule "Brakepad dash light - Visual Symptom"
	when
		$vs: VisualSymptom( isBrakePadsDashLight() );
	then
		delete($vs);
		MechanicalParts mp = new MechanicalParts();
		mp.setBrakePads(true);
		mp.setDescription("Problem with brake padst.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Mechanical part problem - SET");
end

rule "Air condition not working"
	when
		$vs: VisualSymptom( isAirConditionNotWorking() );
	then
		delete($vs);
		FluidParts fp = new FluidParts();
		fp.setFreon(true);
		fp.setDescription("Problem with low freon level.");
		fp.setLevel(0);
		problems.clear();
       	problems.add(fp);
		insert(fp);
		System.out.println("Fluid problem - SET");
end

rule "DPF dash light On"
	when
		$vs: VisualSymptom( isDpfDashLight() );
	then
		delete($vs);
		AirFlowParts ap = new AirFlowParts();
		ap.setDieselParticulateFilter(true);
		ap.setDescription("Problem with DPF.");
		problems.clear();
       	problems.add(ap);
		insert(ap);
		System.out.println("Airflow part problem - SET");
end

rule "Brake fluid low level"
	when
		$vs: VisualSymptom( isBrakeFluidLow() );
	then
		delete($vs);
		FluidParts fp = new FluidParts();
		fp.setBrakeFluid(true);
		fp.setLevel(0);
		MechanicalParts mp = new MechanicalParts();
		mp.setBrakeLines(true);
		
		fp.setDescription("Problem with brake fluid level.");
		mp.setDescription("Problem with brake lines.");
		problems.clear();
       	problems.add(fp);
       	problems.add(mp);
		insert(fp);
		insert(mp);
		System.out.println("Brake fluid fix + brakeLines - SET");	
end

rule "Engine overheating"
	when
		$vs: VisualSymptom( isEngineOverHeating() );
	then
		delete($vs);
		FluidParts fp = new FluidParts();
		fp.setCoolant(true);
		fp.setLevel(0);
		ElectricalParts ep = new ElectricalParts();
		ep.setElectricFan(true);
		fp.setDescription("Problem with coolant level.");
		ep.setDescription("Problem with electric fan.");
		problems.clear();
       	problems.add(fp);
       	problems.add(ep);
		insert(fp);
		insert(ep);
		System.out.println("Coolant problem + electric fan - SET");	
end


// Feels like symptoms

rule "Vehicle rides uncomforbaly"
	when
		$fs: FeelingSymptom( isRidesUncomfortable() );
	then
		delete($fs);
		MechanicalParts mp = new MechanicalParts();
		mp.setShockAbsorber(true);
		mp.setDescription("Problem with shock absorber.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Mechanical part shockabsorber problem - SET");
end

rule "Poor breaking"
	when
		$fs: FeelingSymptom( isPoorBraking() );
	then
		delete($fs);
		MechanicalParts mp = new MechanicalParts();
		mp.setBrakePads(true);
		mp.setBrakeDisc(true);
		FluidParts fp = new FluidParts();
		fp.setBrakeFluid(true);
		mp.setDescription("Problem with brake pads and brake discs.");
		fp.setDescription("Problem with brake fluid.");
		problems.clear();
       	problems.add(mp);
       	problems.add(fp);
		insert(mp);
		insert(fp);
		System.out.println("Brake pads, brake disc problem");
end

rule "Poor performanece"
	when
		$fs: FeelingSymptom( isPoorPerformance() );
	then
		delete($fs);
		AirFlowParts ap = new AirFlowParts();
		ap.setTurboCharger(true);
		ap.setThrottleBody(true);
		ap.setMassAirFlowMeter(true);
		ap.setManifoldAirPressure(true);
		ap.setIntakeManifold(true);
		ap.setEgrValve(true);
		ap.setAirIntakeTube(true);
		ap.setAirFilter(true);
		ap.setDescription("Multiple possible problems with air injection system.");
		problems.clear();
       	problems.add(ap);
		insert(ap);
		System.out.println("Brake pads, brake disc problem");
end

// Audio symptom -- DONE

rule "Grinding symptom"
	when
		$as: AudioSymptom (isGrinding());
	then
		delete($as);
		MechanicalParts mp = new MechanicalParts();
		mp.setBrakeDisc(true);
		mp.setDescription("Problem with brake discs.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Brake Disc Problem - SET");
end

rule "Knocking symptom"
	when
		$as: AudioSymptom (isKnocking());
	then
		delete($as);
		FuelInjectionParts fip = new FuelInjectionParts();
		fip.setNozzle(true);
		fip.setDescription("Problem with nozzle.");
		problems.clear();
       	problems.add(fip);
		insert(fip);
		System.out.println("Nozzle Problem - SET");
end

rule "Whistling symptom"
	when
		$as: AudioSymptom (isWhistling());
	then
		delete($as);
		AirFlowParts ap = new AirFlowParts();
		ap.setTurboCharger(true);
		ap.setDescription("Problem with turbo charger.");
		problems.clear();
       	problems.add(ap);
		insert(ap);
		System.out.println("Turbo charger problem - SET");
end

rule "Ticking symptom"
	when
		$as: AudioSymptom (isTicking());
	then
		delete($as);
		MechanicalParts mp = new MechanicalParts();
		mp.setStabilizer(true);
		mp.setDescription("Problem with stabilizer.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Stabilizer Problem - SET");
end

rule "squealing symptom"
	when
		$as: AudioSymptom (isSquealing());
	then
		delete($as);
		MechanicalParts mp = new MechanicalParts();
		mp.setEngineBelt(true);
		mp.setDescription("Problem with engine belt.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Engine belt Problem - SET");
end

rule "long starting problem"
	when
		$fs: FeelingSymptom( isLongStarting() ) ;
	then
		delete($fs);
		FuelInjectionParts fp = new FuelInjectionParts();
		fp.setSparkPlug(true);
		fp.setDescription("Problem with spark plugs.");
		problems.clear();
       	problems.add(fp);
		insert(fp);
		System.out.println("Spark plugs problem");
end

rule "shaking problem"
	when
		$fs: FeelingSymptom( isShaking() ) ;
	then
		delete($fs);
		FuelInjectionParts fp = new FuelInjectionParts();
		fp.setNozzle(true);
		MechanicalParts mp = new MechanicalParts();
		mp.setDualMassFlyWheel(true);
		fp.setDescription("Problem with nozzle.");
		mp.setDescription("Problem with dual mass flywheel.");
		problems.clear();
       	problems.add(fp);
       	problems.add(mp);
		insert(fp);
		insert(mp);
		System.out.println("Nozzle or dualmass flywheel problem");
end

rule "bouncing problem"
	when
		$fs: FeelingSymptom( isBouncing() ) ;
	then
		delete($fs);
		MechanicalParts mp = new MechanicalParts();
		mp.setTyre(true);;
		mp.setDescription("Problem with tyre.");
		problems.clear();
       	problems.add(mp);
		insert(mp);
		System.out.println("Tyre problem");
end



